// Generated by view binder compiler. Do not edit!
package com.veryfi.lens.headless.receipts.demo.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.card.MaterialCardView;
import com.veryfi.lens.headless.receipts.demo.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LogsListItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout btnHeadless;

  @NonNull
  public final MaterialCardView headlessCard;

  @NonNull
  public final TextView logsMessage;

  @NonNull
  public final TextView logsTitle;

  private LogsListItemBinding(@NonNull ConstraintLayout rootView, @NonNull LinearLayout btnHeadless,
      @NonNull MaterialCardView headlessCard, @NonNull TextView logsMessage,
      @NonNull TextView logsTitle) {
    this.rootView = rootView;
    this.btnHeadless = btnHeadless;
    this.headlessCard = headlessCard;
    this.logsMessage = logsMessage;
    this.logsTitle = logsTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LogsListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LogsListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.logs_list_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LogsListItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_headless;
      LinearLayout btnHeadless = ViewBindings.findChildViewById(rootView, id);
      if (btnHeadless == null) {
        break missingId;
      }

      id = R.id.headless_card;
      MaterialCardView headlessCard = ViewBindings.findChildViewById(rootView, id);
      if (headlessCard == null) {
        break missingId;
      }

      id = R.id.logs_message;
      TextView logsMessage = ViewBindings.findChildViewById(rootView, id);
      if (logsMessage == null) {
        break missingId;
      }

      id = R.id.logs_title;
      TextView logsTitle = ViewBindings.findChildViewById(rootView, id);
      if (logsTitle == null) {
        break missingId;
      }

      return new LogsListItemBinding((ConstraintLayout) rootView, btnHeadless, headlessCard,
          logsMessage, logsTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
